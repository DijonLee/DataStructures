
/*Jovan-Gianni Lee
 * CSC 172
 * 
 * import java.lang.reflect.Array;
 */
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class Project {

	/* BOARD VARIABLES */

	static int[][] board = new int[4][4]; // array board
	static int[][] prevBoard = new int[4][4];
	static int[][] nextBoard = new int[4][4];
	/* BOOLEAN VALID MOVES */
	static boolean noLeft = true;
	static boolean noRight = true;
	static boolean noUp = true;
	static boolean noDown = true;
	static int validMoves = 0;
	static boolean isNotFull;

	/* QUIT AND RESTART */
	static boolean confirmationYN;
	static boolean quit;

	public static void main(String[] args) {
		// Start Game
		System.out.println("Game Start");
		doRandom();
		doRandom();
		printArr();
		// Initialize Scanner
		Scanner sc = new Scanner(System.in);
		String input;

		// Game Loop
		while ((quit != true)) {
			if ((noLeft || noRight || noUp || noDown || checkFull()) != true) {
				quit = true;
			}

			input = sc.nextLine();

			/* Call Statement Depending on the Direction */

			if (input.equals("s")) { // Input S = go Down

				System.out.println("s");
				pressS();

			} else if (input.equals("a")) { // Input A = go Left

				System.out.println("a");
				pressA();

			} else if (input.equals("w")) { // Input W = go Up

				System.out.println("w");

				pressW();

			} else if (input.equals("d")) { // Input S = go Right

				System.out.println("d");
				pressD();
			} else if (input.equals("q")) { // Input Q = Quit

				System.out.println("Quit");
				confirmation(); // Confirm Quit

				if (confirmationYN) { // Confirm Quit
					quit = true;
				}
				refreshBoard(); // Refresh Board after every command
				printArr();// Print Array after every command

			} else if (input.equals("r")) { // Input R = Restart
				confirmation(); // Confirmation Restart
				if (confirmationYN) {
					for (int row = 0; row < board.length; ++row) {
						for (int col = 0; col < board[row].length; ++col) {
							board[row][col] = 0;
						}
					}
					System.out.println("Restart");

				}
				refreshBoard();
				printArr();

			} else {
			}
		}
	}

	/* CHECK IF ANY VALID MOVES UP */
	public static boolean validUp() {
		for (int col = 0; col < board.length; col++) { // col
			for (int row = 0; row < board.length - 1; row++) { // row
				if (board[row][col] == board[row + 1][col]) { // if any open spaces
					noUp = true; // valid moves
					return true;
				}
			}
		}
		noUp = false; // if no matches
		return false;
	}

	/* CHECK IF ANY VALID MOVES UP */
	public static boolean validDown() {
		for (int col = 0; col < board.length; col++) { // col
			for (int row = board.length - 1; row > 0; row--) { // row
				if (board[row][col] == board[row - 1][col]) { // if any open spaces
					noDown = true; // valid moves
					return true;
				}
			}
		}
		noDown = false; // if no matches
		return false;
	}

	/* CHECK IF ANY VALID MOVES RIGHT */
	public static boolean validRight() {
		for (int row = 0; row < board.length; row++) { // row
			for (int col = board.length - 1; col > 0; col--) {// col
				if (board[row][col] == board[row][col - 1]) {// if any open spaces
					noRight = true;
					return true;
				}
			}
		}
		noRight = false; // if no matches
		return false;
	}

	/* CHECK IF ANY VALID MOVES LEFT */
	public static boolean validLeft() {
		for (int row = 0; row < board.length; row++) {
			for (int col = 0; col < board[row].length - 1; col++) {
				if (board[row][col] == board[row][col + 1]) {// if any open spaces
					noLeft = true;
					return true;
				}
			}
		}
		noLeft = false; // if no matches
		return false;
	}

	/* CHECK IF MOVE IS VALID IF VALID ++ */
	public static boolean isValid(int[][] arr1, int[][] arr2) {
		for (int i = 0; i < arr1.length; i++) {
			for (int j = 0; j < arr1[i].length; j++) {
				boolean check1 = Arrays.deepEquals(arr1, arr2);
				if ((arr1[i][j] != arr2[i][j]) || !(check1)) {
					System.out.println("Board different");
					validMoves += 1;
					doRandom();
					copyBoard();
					System.out.println("That was a valid move");

					break;

				} else {
				}
			}
			copyBoard();

			return false;
		}
		return true;
	}

	/* PRESS S */
	public static void pressS() {
		for (int col = 0; col < board.length; col++) {
			int count = 0;

			for (int row = board[col].length - 1; row >= 0; row--) {
				if (board[row][col] != 0) {
					board[board.length - 1 - count][col] = board[row][col];
					if (board.length - 1 - count != row) {
						board[row][col] = 0;
					}
					count++;
				}

			}

		}

		for (int col = 0; col < board.length; col++) {
			for (int row = board.length - 1; row > 0; row--) {
				if (board[row][col] == board[row - 1][col])
				// add the two tiles with the same value
				{
					board[row][col] += board[row - 1][col];
					board[row - 1][col] = 0;

					break;

				}
			}
		}

		for (int col = 0; col < board.length; col++) {
			int count = 0;

			for (int row = board.length - 1; row >= 0; row--)

			{
				if (board[row][col] != 0) {
					board[board.length - 1 - count][col] = board[row][col];
					if (board.length - 1 - count != row) {
						board[row][col] = 0;
					}
					count++;
				}

			}

		}
		/* CHECK FULL, CHECK ANY VALID MOVES AVAIL, PRINT BOARD */
		refreshBoard();

		checkFull(); // Check if Board full
		isValid(prevBoard, board); // Check if we can do random
		validUp();
		validDown();
		validRight();
		validLeft();
		printArr();
		maxValue();

	}

	/* PRESS DOWN */
	public static void pressD() {
		for (int row = 0; row < board.length; row++) {
			int count = 0;

			for (int col = board.length - 1; col >= 0; col--)

			{
				if (board[row][col] != 0) {
					board[row][board.length - 1 - count] = board[row][col];
					if (board.length - 1 - count != col) {
						board[row][col] = 0;
					}
					count++;
				}

			}

		}

		for (int row = 0; row < board.length; row++) {
			for (int col = board.length - 1; col > 0; col--) {
				if (board[row][col] == board[row][col - 1]) {
					board[row][col] += board[row][col - 1];
					board[row][col - 1] = 0;
					break;

				}
			}
		}

		for (int row = 0; row < board.length; row++) {
			int count = 0;

			for (int col = board.length - 1; col >= 0; col--)

			{
				if (board[row][col] != 0) {
					board[row][board.length - 1 - count] = board[row][col];
					if (board.length - 1 - count != col) {
						board[row][col] = 0;
					}
					count++;
				}

			}

		}
		/* CHECK FULL, CHECK ANY VALID MOVES AVAIL, PRINT BOARD */
		refreshBoard();

		checkFull(); // Check if Board full
		isValid(prevBoard, board); // Check if we can do random
		validUp();
		validDown();
		validRight();
		validLeft();
		printArr();
		maxValue();

	}

	/* PRESS UP */
	public static void pressW() {

		for (int col = 0; col < board.length; col++) {
			int count = 0;
			for (int row = 0; row < board.length; row++) {
				if (board[row][col] != 0) {
					board[0 + count][col] = board[row][col];
					if (0 + count != row) {
						board[row][col] = 0;
					}
					count++;
				}
			}
		}

		for (int col = 0; col < board.length; col++) {
			for (int row = 0; row < board.length - 1; row++) {
				if (board[row][col] == board[row + 1][col]) {
					board[row][col] += board[row + 1][col];
					board[row + 1][col] = 0;

					break;
				}
			}
		}

		for (int col = 0; col < board.length; col++) {
			int count = 0;
			for (int row = 0; row < board.length; row++) {
				if (board[row][col] != 0) {
					board[0 + count][col] = board[row][col];
					if (0 + count != row) {
						board[row][col] = 0;
					}
					count++;
				}
			}
		}
		/* CHECK FULL, CHECK ANY VALID MOVES AVAIL, PRINT BOARD */
		refreshBoard();

		checkFull(); // Check if Board full
		isValid(prevBoard, board); // Check if we can do random
		validUp();
		validDown();
		validRight();
		validLeft();
		printArr();
		maxValue();

	}

	public static void pressA() {
		for (int row = 0; row < board.length; row++) {
			int count = 0;
			for (int col = 0; col < board[row].length; col++) {

				if (board[row][col] != 0) {
					board[row][0 + count] = board[row][col];

					if (0 + count != col) {
						board[row][col] = 0;
					}
					count++;
				}
			}

		}
		for (int row = 0; row < board.length; row++) {
			for (int col = 0; col < board[row].length - 1; col++) {
				if (board[row][col] == board[row][col + 1]) {
					board[row][col] += board[row][col + 1];
					board[row][col + 1] = 0;
					break;

				}
			}
		}

		for (int row = 0; row < board.length; row++) {
			int count = 0;
			for (int col = 0; col < board.length; col++)

			{
				if (board[row][col] != 0) {
					board[row][0 + count] = board[row][col];
					if (0 + count != col) {
						board[row][col] = 0;
					}
					count++;
				}
			}

		}
		/* CHECK FULL, CHECK ANY VALID MOVES AVAIL, PRINT BOARD */
		refreshBoard();

		checkFull(); // Check if Board full
		isValid(prevBoard, board); // Check if we can do random
		validUp();
		validDown();
		validRight();
		validLeft();
		printArr();
		maxValue();
		if (prevBoard == board) {
			System.out.println("Random");
		}
	}

	/* CREATE RANDOM NUMBER */
	public static void doRandom() {

		Random random = new Random();
		int min = 0;
		int max = 3;
		int index = random.nextInt(4); // Random Col
		int arrIndex = random.nextInt(4);// Random Row
		int randomNum = new Random().nextDouble() < 0.8 ? 2 : 4; // Random number with 80 chance 2 rest 4

		if (board[arrIndex][index] != 0) {

			doRandom();

		} else {

			board[arrIndex][index] = randomNum;

		}

	}

	/* PRINT BOARD */

	public static void printArr() {

		for (int[] row : board) {

			for (int item : row) {

				System.out.printf("%4d", item);

			}

			System.out.println();

		}

		System.out.println();
		System.out.println("Valid Moves: " + validMoves);

	}

	/* CHECK IS BOARD FULL */
	public static boolean checkFull() {
		// IS BOARD IS FULL
		for (int row = 0; row < board.length; row++) {
			for (int col = 0; col < board[row].length; col++) {
				if (board[row][col] == 0) {
					return true; // // board not fullL

				}
			}

		}

		printArr(); // board full

		System.out.println("Valid Moves: " + validMoves);
		return false;

	}

	/* CONFIRM USER QUIT */
	public static void confirmation() {
		Scanner scanCon = new Scanner(System.in);

		System.out.println("Are you sure you wanna restart? input y/n");
		String confirmation = scanCon.nextLine();

		if (confirmation.equals("y")) {
			confirmationYN = true;
		} else if (confirmation.equals("n")) {
			confirmationYN = false;
		} else {
			System.out.println("Try again");

			return;

		}

	}

	/* COPY BOARD TO COMPARE TO PREV BOARD */
	public static void copyBoard() {

		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				prevBoard[i][j] = board[i][j];
			}
		}

	}

	/* GET MAX VALUE OF THE BOARD */
	public static void maxValue() {
		int maxValue = board[0][0];
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				if (board[i][j] > maxValue) {
					maxValue = board[i][j];
				}
			}
		}
		System.out.println("MAX: " + maxValue);
	}

	/* "CLEAR" CONSOLE */
	public static void refreshBoard() {
		System.out.println();
		System.out.println();
		System.out.println();
		System.out.println();
		System.out.println();
		System.out.println();
		System.out.println();
		System.out.println();
		System.out.println();
		System.out.println();
		System.out.println();
		System.out.println();

	}

}
