
/******************************************************************************
 *  Compilation:  javac Sorting.java
 *  Execution:    java Sorting input.txt AlgorithmUsed
 *  Dependencies: StdOut.java In.java Stopwatch.java
 *  Data files:   http://algs4.cs.princeton.edu/14analysis/1Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/2Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/4Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/8Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/16Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/32Kints.txt
 *                http://algs4.cs.princeton.edu/14analysis/1Mints.txt
 *
 *  A program to play with various sorting algorithms. 
 *
 *
 *  Example run:
 *  % java Sorting 2Kints.txt  2
 *
 ******************************************************************************/
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;

public class Sorting {

	/**
	 * 
	 * Sorts the numbers present in the file based on the algorithm provided. 0 =
	 * Arrays.sort() (Java Default) 1 = Bubble Sort 2 = Selection Sort 3 = Insertion
	 * Sort 4 = Mergesort 5 = Quicksort
	 *
	 * @param args
	 *            the command-line arguments
	 */
	public static void main(String[] args) {
		In in = new In(args[0]);
		// In sortType = new In(args[1]);
		int sortMethod = Integer.parseInt(args[1]);

		// Storing file input in an array
		int[] a = in.readAllInts();

		int[] b = in.readAllInts();

		Arrays.sort(b); // b contains sorted integers from a (You can use Java Arrays.sort() method)

		int[] c = in.readAllInts(); // c contains all integers stored in reverse order
		for (int i = 0; i < c.length / 2; i++) {
			int temp = c[i];
			c[i] = c[c.length - i - 1];
			c[c.length - i - 1] = temp;
		}

		// d contains almost sorted array
		int[] d = in.readAllInts();
		Arrays.sort(d);
		int numswap = (int) (.1 * d.length);
		for (int i = 1; i < numswap; i++) {
			int temp = 0;
			temp = d[i];
			d[i] = d[i + 1];
			d[i + 1] = temp;

		}

		// TODO: Generate 3 other arrays, b, c, d where
		// (you can have your own O(n) solution to get c from b
		// (You can copy b to a and then perform (0.1 * d.length) many swaps to acheive
		// this.

		// TODO:

		if (sortMethod == 0) {

			/* SORT A */
			Stopwatch timer = new Stopwatch();
			// TODO: Perform Sorting and store the result in an array
			Arrays.sort(a);

			double time = timer.elapsedTimeMillis();

			String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			// TODO: Replace with your own netid
			String netID = "jlee251";
			// TODO: Replace with the algorithm used
			String algorithmUsed = "built in sort";
			// TODO: Replace with the array used
			String arrayUsed = "a";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time, timeStamp, netID, args[0]);

			/* SORT B */
			Stopwatch timer2 = new Stopwatch();
			Arrays.sort(b);
			double time2 = timer2.elapsedTimeMillis();
			String timeStamp2 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			String arrayUsedb = "b";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsedb, time2, timeStamp2, netID, args[0]);

			/* SORT C */
			Stopwatch timer3 = new Stopwatch();
			Arrays.sort(c);
			double time3 = timer3.elapsedTimeMillis();
			String timeStamp3 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			String arrayUsedc = "c";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsedc, time3, timeStamp3, netID, args[0]);

			/* SORT D */
			Stopwatch timer4 = new Stopwatch();
			Arrays.sort(d);
			double time4 = timer4.elapsedTimeMillis();
			String timeStamp4 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			String arrayUsedd = "d";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsedd, time4, timeStamp4, netID, args[0]);

			Arrays.sort(d);

		}
		if (sortMethod == 1) {

			/* SORT A */
			Stopwatch timer = new Stopwatch();
			// TODO: Perform Sorting and store the result in an array
			int n = a.length;
			for (int i = 0; i < n - 1; i++)
				for (int j = 0; j < n - i - 1; j++)
					if (a[j] > a[j + 1]) {
						// swap temp and arr[i]
						int temp = a[j];
						a[j] = a[j + 1];
						a[j + 1] = temp;
					}

			double time = timer.elapsedTimeMillis();

			String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			// TODO: Replace with your own netid
			String netID = "jlee251";
			// TODO: Replace with the algorithm used
			String algorithmUsed = "bubblesort";
			// TODO: Replace with the array used
			String arrayUsed = "a";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time, timeStamp, netID, args[0]);

			/* SORT B */
			Stopwatch timer2 = new Stopwatch();
			int nb = b.length;

			for (int i = 0; i < nb - 1; i++)
				for (int j = 0; j < nb - i - 1; j++)
					if (a[j] > a[j + 1]) {
						// swap temp and arr[i]
						int temp = a[j];
						a[j] = a[j + 1];
						a[j + 1] = temp;
					}
			double time2 = timer2.elapsedTimeMillis();
			String timeStamp2 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			String arrayUsedb = "b";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsedb, time2, timeStamp2, netID, args[0]);

			/* SORT C */
			Stopwatch timer3 = new Stopwatch();
			int nc = c.length;

			for (int i = 0; i < nc - 1; i++)
				for (int j = 0; j < nc - i - 1; j++)
					if (c[j] > c[j + 1]) {
						// swap temp and arr[i]
						int temp = c[j];
						d[j] = c[j + 1];
						c[j + 1] = temp;
					}
			double time3 = timer3.elapsedTimeMillis();
			String timeStamp3 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			String arrayUsedc = "c";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsedc, time3, timeStamp3, netID, args[0]);

			/* SORT D */
			Stopwatch timer4 = new Stopwatch();
			int nd = d.length;

			for (int i = 0; i < nd - 1; i++)
				for (int j = 0; j < nd - i - 1; j++)
					if (d[j] > d[j + 1]) {
						// swap temp and arr[i]
						int temp = d[j];
						d[j] = d[j + 1];
						d[j + 1] = temp;
					}
			double time4 = timer4.elapsedTimeMillis();
			String timeStamp4 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			String arrayUsedd = "d";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsedd, time4, timeStamp4, netID, args[0]);

			Arrays.sort(d);

		}

		if (sortMethod == 2) {

			/* SORT A */
			Stopwatch timer = new Stopwatch();
			// TODO: Perform Sorting and store the result in an array
			int n = a.length;

			// One by one move boundary of unsorted subarray
			for (int i = 0; i < n - 1; i++) {
				// Find the minimum element in unsorted array
				int min_idx = i;
				for (int j = i + 1; j < n; j++)
					if (a[j] < a[min_idx])
						min_idx = j;

				// Swap the found minimum element with the first
				// element
				int temp = a[min_idx];
				a[min_idx] = a[i];
				a[i] = temp;
			}

			double time = timer.elapsedTimeMillis();

			String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			// TODO: Replace with your own netid
			String netID = "jlee251";
			// TODO: Replace with the algorithm used
			String algorithmUsed = "bubblesort";
			// TODO: Replace with the array used
			String arrayUsed = "a";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time, timeStamp, netID, args[0]);

			/* SORT B */
			Stopwatch timer2 = new Stopwatch();
			int nb = b.length;

			// One by one move boundary of unsorted subarray
			for (int i = 0; i < nb - 1; i++) {
				// Find the minimum element in unsorted array
				int min_idx = i;
				for (int j = i + 1; j < nb; j++)
					if (a[j] < a[min_idx])
						min_idx = j;

				// Swap the found minimum element with the first
				// element
				int temp = a[min_idx];
				b[min_idx] = b[i];
				b[i] = temp;
			}
			double time2 = timer2.elapsedTimeMillis();
			String timeStamp2 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			String arrayUsedb = "b";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsedb, time2, timeStamp2, netID, args[0]);

			/* SORT C */
			Stopwatch timer3 = new Stopwatch();
			int nc = c.length;

			// One by one move boundary of unsorted subarray
			for (int i = 0; i < nc - 1; i++) {
				// Find the minimum element in unsorted array
				int min_idx = i;
				for (int j = i + 1; j < nc; j++)
					if (c[j] < c[min_idx])
						min_idx = j;

				// Swap the found minimum element with the first
				// element
				int temp = c[min_idx];
				c[min_idx] = c[i];
				c[i] = temp;
			}
			double time3 = timer3.elapsedTimeMillis();
			String timeStamp3 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			String arrayUsedc = "c";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsedc, time3, timeStamp3, netID, args[0]);

			/* SORT D */
			Stopwatch timer4 = new Stopwatch();
			int nd = d.length;

			// One by one move boundary of unsorted subarray
			for (int i = 0; i < nd - 1; i++) {
				// Find the minimum element in unsorted array
				int min_idx = i;
				for (int j = i + 1; j < nd; j++)
					if (d[j] < d[min_idx])
						min_idx = j;

				// Swap the found minimum element with the first
				// element
				int temp = d[min_idx];
				d[min_idx] = d[i];
				d[i] = temp;
			}
			double time4 = timer4.elapsedTimeMillis();
			String timeStamp4 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			String arrayUsedd = "d";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsedd, time4, timeStamp4, netID, args[0]);

			Arrays.sort(d);

		} else if (sortMethod == 3) { 
			// ISNERTION SORT
			/* SORT A */
			Stopwatch timer = new Stopwatch();
			// TODO: Perform Sorting and store the result in an array
			int n = a.length;
			for (int i = 1; i < n; ++i) {
				int key = a[i];
				int j = i - 1;

				/*
				 * Move elements of arr[0..i-1], that are greater than key, to one position
				 * ahead of their current position
				 */
				while (j >= 0 && a[j] > key) {
					a[j + 1] = a[j];
					j = j - 1;
				}
				a[j + 1] = key;
			}

			double time = timer.elapsedTimeMillis();

			String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			// TODO: Replace with your own netid
			String netID = "jlee251";
			// TODO: Replace with the algorithm used
			String algorithmUsed = "bubblesort";
			// TODO: Replace with the array used
			String arrayUsed = "a";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time, timeStamp, netID, args[0]);

			/* SORT B */
			Stopwatch timer2 = new Stopwatch();
			// TODO: Perform Sorting and store the result in an array
			int nb = b.length;
			for (int i = 1; i < nb; ++i) {
				int key = b[i];
				int j = i - 1;

				/*
				 * Move elements of arr[0..i-1], that are greater than key, to one position
				 * ahead of their current position
				 */
				while (j >= 0 && b[j] > key) {
					b[j + 1] = b[j];
					j = j - 1;
				}
				b[j + 1] = key;
			}

			double time2 = timer2.elapsedTimeMillis();
			String timeStamp2 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			// TODO: Replace with your own netid
			// TODO: Replace with the algorithm used
			// TODO: Replace with the array used
			String arrayUsedb = "b";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time2, timeStamp2, netID, args[0]);

			/* SORT A */
			Stopwatch timer3 = new Stopwatch();
			// TODO: Perform Sorting and store the result in an array
			int nc = c.length;
			for (int i = 1; i < nc; ++i) {
				int key = c[i];
				int j = i - 1;

				/*
				 * Move elements of arr[0..i-1], that are greater than key, to one position
				 * ahead of their current position
				 */
				while (j >= 0 && c[j] > key) {
					c[j + 1] = c[j];
					j = j - 1;
				}
				c[j + 1] = key;
			}

			double time3 = timer3.elapsedTimeMillis();
			String timeStamp3 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			// TODO: Replace with your own netid
			// TODO: Replace with the algorithm used
			// TODO: Replace with the array used
			String arrayUsedc = "c";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time2, timeStamp2, netID, args[0]);

			/* SORT A */
			Stopwatch timer4 = new Stopwatch();
			// TODO: Perform Sorting and store the result in an array
			int nd = d.length;
			for (int i = 1; i < nd; ++i) {
				int key = d[i];
				int j = i - 1;

				/*
				 * Move elements of arr[0..i-1], that are greater than key, to one position
				 * ahead of their current position
				 */
				while (j >= 0 && d[j] > key) {
					d[j + 1] = d[j];
					j = j - 1;
				}
				d[j + 1] = key;
			}

			double time4 = timer4.elapsedTimeMillis();
			String timeStamp4 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
			// TODO: Replace with your own netid
			// TODO: Replace with the algorithm used
			// TODO: Replace with the array used
			String arrayUsedd = "d";
			StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time2, timeStamp2, netID, args[0]);

		} else if (sortMethod ==4) {
			
			// MERGE SORT
						/* SORT A */
						Stopwatch timer = new Stopwatch();
						// TODO: Perform Sorting and store the result in an array
				        a = mergesort(a);

						double time = timer.elapsedTimeMillis();

						String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
						// TODO: Replace with your own netid
						String netID = "jlee251";
						// TODO: Replace with the algorithm used
						String algorithmUsed = "mergesort";
						// TODO: Replace with the array used
						String arrayUsed = "a";
						StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time, timeStamp, netID, args[0]);

						/* SORT B */
						Stopwatch timer2 = new Stopwatch();
						// TODO: Perform Sorting and store the result in an array
				        b = mergesort(b);

						

						double time2 = timer2.elapsedTimeMillis();
						String timeStamp2 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
						// TODO: Replace with your own netid
						// TODO: Replace with the algorithm used
						// TODO: Replace with the array used
						String arrayUsedb = "b";
						StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time2, timeStamp2, netID, args[0]);

						/* SORT A */
						Stopwatch timer3 = new Stopwatch();
						// TODO: Perform Sorting and store the result in an array
				        c = mergesort(c);


						double time3 = timer3.elapsedTimeMillis();
						String timeStamp3 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
						// TODO: Replace with your own netid
						// TODO: Replace with the algorithm used
						// TODO: Replace with the array used
						String arrayUsedc = "c";
						StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time2, timeStamp2, netID, args[0]);

						/* SORT A */
						Stopwatch timer4 = new Stopwatch();
						// TODO: Perform Sorting and store the result in an array
				        d = mergesort(d);


						double time4 = timer4.elapsedTimeMillis();
						String timeStamp4 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
						// TODO: Replace with your own netid
						// TODO: Replace with the algorithm used
						// TODO: Replace with the array used
						String arrayUsedd = "d";
						StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time2, timeStamp2, netID, args[0]);

					} else if (sortMethod == 5) {

						// QUICK SORT
									/* SORT A */
									Stopwatch timer = new Stopwatch();
									// TODO: Perform Sorting and store the result in an array
								int lowa = 0;
								int higha = a.length-1;
									quickSort(a, lowa, higha);
									
									double time = timer.elapsedTimeMillis();

									String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
									// TODO: Replace with your own netid
									String netID = "jlee251";
									// TODO: Replace with the algorithm used
									String algorithmUsed = "mergesort";
									// TODO: Replace with the array used
									String arrayUsed = "a";
									StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time, timeStamp, netID, args[0]);

									/* SORT B */
									Stopwatch timer2 = new Stopwatch();
									// TODO: Perform Sorting and store the result in an array
									int lowb = 0;
									int highb = b.length-1;
										quickSort(b, lowb, highb);
									

									double time2 = timer2.elapsedTimeMillis();
									String timeStamp2 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
									// TODO: Replace with your own netid
									// TODO: Replace with the algorithm used
									// TODO: Replace with the array used
									String arrayUsedb = "b";
									StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time2, timeStamp2, netID, args[0]);

									/* SORT C */
									Stopwatch timer3 = new Stopwatch();
									// TODO: Perform Sorting and store the result in an array
									int lowc = 0;
									int highc = c.length-1;
										quickSort(c, lowc, highc);

									double time3 = timer3.elapsedTimeMillis();
									String timeStamp3 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
									// TODO: Replace with your own netid
									// TODO: Replace with the algorithm used
									// TODO: Replace with the array used
									String arrayUsedc = "c";
									StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time2, timeStamp2, netID, args[0]);

									/* SORT A */
									Stopwatch timer4 = new Stopwatch();
									// TODO: Perform Sorting and store the result in an array
									int lowd = 0;
									int highd = d.length-1;
										quickSort(d, lowd, highd);

									double time4 = timer4.elapsedTimeMillis();
									String timeStamp4 = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
									// TODO: Replace with your own netid
									// TODO: Replace with the algorithm used
									// TODO: Replace with the array used
									String arrayUsedd = "d";
									StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time2, timeStamp2, netID, args[0]);

					}
		}
		/*
		

		// Read the second argument and based on input select the sorting algorithm
		// * 0 = Arrays.sort() (Java Default)
		// * 1 = Bubble Sort
		// * 2 = Selection Sort
		// * 3 = Insertion Sort
		// * 4 = Mergesort
		// * 5 = Quicksort
		// Perform sorting on a,b,c,d. Pring runtime for each case along with timestamp
		// and record those.
		// For runtime and priting, you can use the same code from Lab 4 as follows:

		// TODO: For each array, a, b, c, d:

		// public static void {

		/*
		 * Stopwatch timer = new Stopwatch(); // TODO: Perform Sorting and store the
		 * result in an array
		 * 
		 * double time = timer.elapsedTimeMillis();
		 * 
		 * String timeStamp = new
		 * SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
		 * // TODO: Replace with your own netid String netID = "tbiswas2"; // TODO:
		 * Replace with the algorithm used String algorithmUsed = "insertion sort"; //
		 * TODO: Replace with the array used String arrayUsed = "a";
		 * StdOut.printf("%s %s %8.1f   %s  %s  %s\n", algorithmUsed, arrayUsed, time,
		 * timeStamp, netID, args[0]);
		 */ // Write the resultant array to a file (Each time you run a program 4 output
			// files should be generated. (one for each a,b,c, and d)

	
	// }

	private static void insertionSort() {
		// TODO Auto-generated method stub

	}

	
	
	 private static int[] merge(int[] ls, int[] ls2) {
	        int[] c = new int[ls.length + ls2.length];
	        int i = 0, j = 0;
	        for (int k = 0; k < c.length; k++) {
	            if      (i >= ls.length) c[k] = ls2[j++];
	            else if (j >= ls2.length) c[k] = ls[i++];
	            else if (ls[i] <= ls2[j])  c[k] = ls[i++];
	            else                    c[k] = ls2[j++];
	        }
	        return c;
	    }

	    public static int[] mergesort(int[] a2) {
	        int N = a2.length;
	        if (N <= 1) return a2;
	        int[] a = new int[N/2];
	        int[] b = new int[N - N/2];
	        for (int i = 0; i < a.length; i++)
	            a[i] = a2[i];
	        for (int i = 0; i < b.length; i++)
	            b[i] = a2[i + N/2];
	        return merge(mergesort(a), mergesort(b));
	    }

	    public static void quickSort(int[] arr, int low, int high) {
			if (arr == null || arr.length == 0)
				return;
	 
			if (low >= high)
				return;
	 
			// pick the pivot
			int middle = low + (high - low) / 2;
			int pivot = arr[middle];
	 
			// make left < pivot and right > pivot
			int i = low, j = high;
			while (i <= j) {
				while (arr[i] < pivot) {
					i++;
				}
	 
				while (arr[j] > pivot) {
					j--;
				}
	 
				if (i <= j) {
					int temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
					i++;
					j--;
				}
			}
	 
			// recursively sort two sub parts
			if (low < j)
				quickSort(arr, low, j);
	 
			if (high > i)
				quickSort(arr, i, high);
		}
	
 
	private static void Quicksort() {
		// TODO Auto-generated method stub

	}

	private static void selectionSort() {
		// TODO Auto-generated method stub

	}

	private static void bubbleSort() {
		// TODO Auto-generated method stub

	}
}
